1.
if ( condition ) { command };
if ( a < b ) { alert("a is less than b")};

2.
dont do too much nested 'if' statements.
you can use function rather than nested 'if' statements.

3.
=	command, assignment
==	equality
===	strict equality

!=	not equal
!==	strictly not equal

4.
if ( a===b   &&   c===d ) {...
if ( a===b   ||   c===d ) {...

5.
If you need to use multiple 'if' statements,
you can use one 'switch' statement.
var grade = "Premium";


switch ( grade ) {

	case "Regular":

		console.log("$3.15");

		break;



	case "Premium":

		console.log("$3.47");

		break;



	case "Diesel":

		console.log("$3.68");

		break;


	
default:

		console.log("not valid");

}


6.
//how to use no condition function:
function myFunction ( ) {

	console.log("This is a function.);

}



var d = 123;


switch ( d ) {

	case 123:

		myFunction( );

		break;


	default:

		console.log("not");
}

// if you just write a nocondition function, it will not work
// until you call it. 

7.
function plusFunction (a,b) {

	console.log(a+b);

}



plusFunction(1,1);

plusFunction(100,2334);



8.
var name = prompt("What is your name?");
alert("Hello, " + name);
// in return, when you open the website,
// one query will appear. You type your name and enter,
// then Hello, Said will appear.

9.
// if you write a variable inside of curly brakets of a function,
// the variable will exist just in there. eg:

function simpleFunction() {
//lots of code
var x = 500;
// lots of code
console.log(x);
}
simpleFunction(); // in return, 500 will appear
alert(x); // undefined

10.
var x;

function simpleFunction() {
//lots of code
x = 500;
// lots of code
console.log(x);
}
simpleFunction(); // in return, 500 will appear
alert(x); // in return, 500 will appear as well

11.
//linking html file to js file

//in html file
<body>
...
...
...
<script src="script.js"></script>
</body>

12.
//while loop
var a = 1;		// set up the index
while ( a < 10 ) {	// check the condition
	console.log(a);
	a++;	// increment index
} return 9

13.
var amount = 0;


var i = 1;

while (i<10) {

	amount += 10;

	i++;

}

console.log("amount is " + amount);

// return amount is 90

14.
// for loop
for (var i = 1; 	i < 10;		i++) {
//setup index       //check condition   // increment index
	// do stuff
	// do stuff
}

15.
// do/while statement
var a = 1;
do {
	// your code;
	a++;
} while (a<10); 

// big difference between while loop and do/while
statement is your code in do/while st. will always
happen at least once no matter check condition is
true or or false. But in while loop, if the check 
condition is false, your code will never happen.

16.
var a = "55"; // typeof a > string
var b = Number(a); // typeof b > number

var c = 66; // typeof c > number
var d = String(c); // typeof d > string

17.
if ( isNaN(d) ) {
	console.log("it is not a number.");
} // return it is not a number.
// isNaN(...) is a builtin function

18.
var phrase = "Simple Phrase";
console.log( phrase.toUpperCase() );
// return SIMPLE PHRASE

19.
var str1 = "Hello";
var str2 = "hello";
// obviously str1 != str2

// but how can you make a comparison without
// case sensitive?

str1.toLowerCase() == str2.toLowerCase();
// that's it ****

20.
var phrase = "I am very happy.";
var position = phrase.indexOf("very");
console.log(position);
// return 5

21.
REGULAR EXPRESSIONS
var myRE = /hello/;
// to define regular expressions you need to put 
forward slash on the head and end of the expression.

// or 

var myRE = new RegExp("hello");

// but first way is shorter and better.

22.
a.test(b) > a belongs to b

23.
to manipulate a web page by javascript
a. add script src to html file
b. on js page, create:
	var variableName = document.getElementById("nameOfId");
	variableName.innerHTML = "Wow, a new headline!";
	// this will change the element in webpage

24.
 events - there are lots of event
for example: .onclick event
 myElement.onclick = function () { };

25.
The JavaScript community considered this friendliness 
to be a mistake and with ES5 introduced strict mode: 
place the string 'use strict'; at the top of your file. This 
now causes our code to fail with a run-time error when 
forgetting to 'declare' our variables.

'use strict';
a = 'Hello'; // produces: ReferenceError: a is not defined
console.log(a);

26.
tracing flow of js code is very important to

27.
const myNumbers = [1, 2, 3];

for (const myNumber of myNumbers) {
	console.log(myNumber);
}
// return
// 1
// 2
// 3
//If you need to use a for loop involving arrays, 
//this will often be your first choice.

28.
const obj = {
  a: 10,
  b: 'test'
}

// for...in
for (const key in obj) {
  console.log(obj[key])
}

// equivalent for...of
for (const key of Object.keys(obj)) {
  console.log(obj[key])
}

29.
let obj = {name: 'John', age: 24};
//This object has two properties: name and age. 
//The "value" of the property name is the 
//string 'John'. The "value" of the property age is the 
//number 24.

//When accessing object properties, you can 
//use the dot-notation: obj.name or the 
//bracket-notation: obj["name"].

30.
//Just like with arrays, you can also use a variable 
//to access properties, as long as these variables are 
//strings. In this case you cannot use the dot-notation!

const ageKey = 'age';
console.log(obj[ageKey]); // -> 24

31.
//Ternary operator
//condition ? expr1 : expr2

const conditionOfCar = age < 1 ? 'new' : 'used';

//The conditionOfCar variable will be assigned the 
//string 'new' if the age < 1 condition holds true, 
//otherwise it is assigned the string 'used'.




















